import torch
import numpy as np
import matplotlib.pyplot as plt

def visualize_tensor_as_image(tensor):
    # Assuming the input tensor is a square matrix
    if len(tensor.shape) != 2 or tensor.shape[0] != tensor.shape[1]:
        raise ValueError("Input tensor must be a square matrix.")

    plt.imshow(tensor, cmap='gray', interpolation='nearest')
    plt.colorbar()
    plt.show()

def shift_preserving_black(img, direction : str, max_shift: int):
    shift = np.random.randint(low=1, high= max_shift+1)
    visualize_tensor_as_image(img)
    if direction == "u":
        img = torch.roll(img, -shift, 0)
        img[-shift:,:] = torch.full(img[-shift:,:].shape, -1)
    elif direction == "d":
        img = torch.roll(img, shift, 0)
        img[:shift,:] = torch.full(img[:shift,:].shape, -1)
    elif direction == "l":
        img = torch.roll(img, -shift, 1)
        img[:,-shift:] = torch.full(img[:,-shift:].shape, -1)
    elif direction == "r":
        img = torch.roll(img, shift, 1)
        img[:,:shift] = torch.full(img[:,:shift].shape, -1)
    else:
        raise ValueError("wrong value passed")
    visualize_tensor_as_image(img)
    return img

def shift_not_removing_white(img, direction : str, max_shift: int):
    shift = np.random.randint(low=1, high= max_shift+1)
    shift = max_shift
    visualize_tensor_as_image(img)
    row_length = img.shape[1]
    col_length = img.shape[0]
    if direction == "u":
        while shift > 0 and torch.sum(img[:shift, :]) != -1 * shift * col_length:
            shift = shift - 1
        if shift == 0:
            print("Image could not be shifted.")
            return
        print(shift)
        img = torch.roll(img, -shift, 0)
    elif direction == "d":
        while shift > 0 and torch.sum(img[-shift:, :]) != -1 * shift * col_length:
            shift = shift - 1
        if shift == 0:
            print("Image could not be shifted.")
            return
        print(shift)
        img = torch.roll(img, shift, 0)
    elif direction == "l":
        while shift > 0 and torch.sum(img[:, :shift]) != -1 * row_length * shift:
            shift = shift - 1
        if shift == 0:
            print("Image could not be shifted.")
            return
        print(shift)
        img = torch.roll(img, -shift, 1)
    elif direction == "r":
        while shift > 0 and torch.sum(img[:, -shift:]) != -1 * row_length * shift:
            shift = shift - 1
        if shift == 0:
            print("Image could not be shifted.")
            return
        print(shift)
        img = torch.roll(img, shift, 1)
    else:
        raise ValueError("wrong value passed")
    visualize_tensor_as_image(img)
    return img
